openapi: 3.0.0
info:
  description: API for a tech proof, now turned into a learning exercise.
    It models a bare-bones social network API.
  version: "1.0.0"
  title: indigitest API
tags:
  - name: user
    description: Interface for the user object
  - name: friends
    description: Interface for relations between users
paths:
  /user:
    post:
      tags:
        - user
      summary: Add a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: newly created user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  '/user/{userId}':
    get:
      tags:
        - user
      summary: Finds a user by id
      parameters: 
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: user object with matching id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: user not found
    put:
      tags:
        - user
      summary: Updates a user
      parameters: 
        - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      responses:
        '200':
          description: user modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: user not found
    delete:
      tags:
        - user
      summary: Removes a user by id
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: returns remove count
          content:
            application/json:
              schema:
                properties:
                  removeCount: 
                    type: integer
                example:
                  removeCount: 1
  /friend:
    post:
      tags:
        - friends
      summary: post new friendship
      requestBody:
        content:
          application/json:
            schema:
              properties:
                id1:
                  type: string
                id2:
                  type: string
              example:
                id1: ck9vik2sw0000cytlchrg5kik
                id2: ck9vik2sw0000cytlchrg5cac
      responses:
        '201':
          description: registered a new friendship
          content:
            application/json:
              schema:
                properties:
                  befriender:
                    type: string
                  userid:
                    type: string
                example:
                  befriender: ck9vik2sw0000cytlchrg5kik
                  userid: ck9vik2sw0000cytlchrg5cac
  '/friend/remove':
    post:
      tags:
        - friends
      summary: remove friendship
      requestBody:
        content:
          application/json:
            schema:
              properties:
                id1:
                  type: string
                id2:
                  type: string
      responses:
        '200':
          description: friendship deleted
          content:
            application/json:
              schema:
                properties:
                  removeCount:
                    type: integer
                example:
                  removeCount: 1
        '204':
          description: friendship not found/ already deleted
          content:
            application/json:
              schema:
                properties:
                  removeCount:
                    type: integer
        '442':
          description: wrong input, both ids are necessary
  '/friend/list/{userId}':
    get:
      tags:
        - friends
      summary: get friends list or friends count of a user
      parameters: 
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: friend list or friend count
          content:
            application/json:
              schema:
                properties:
                  friends: 
                    type: array
                    items: 
                      type: string
                example:
                  friends:
                    - userid: ck9vik2sw0000cytlchrg5woo
                    - userid: ck9vik2sw0000cytlchrg5cac
                    - userid: ck9vik2sw0000cytlchrg5kke
  '/friend/count/{userId}':
    get:
      tags:
        - friends
      summary: get friends list or friends count of a user
      parameters: 
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: number of friends the user has
          content:
            application/json:
              schema:
                properties:
                  friendCount:
                    type: integer
                example:
                  friendCount: 3
components:
  schemas:
    User:
      type: object
      description: user object w/o password
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        source:
          properties:
            longitude:
              type: number
            latitude:
              type: number
            browserlang:
              type: integer
      example: 
        id: ck9vik2sw0000cytlchrg5kik
        username: Fran.Dietrch27
        email: Cale30@hotail.cm
        source:
          longitude: 81.1052
          latitude: 27.3772
          browserlang: es
      xml:
        name: User
    UserInput:
      type: object
      description: flattened user object
      properties:
        id:
          type: string
        username:
          type: string
        password:
          type: string
        email:
          type: string
        longitude:
          type: number
        latitude:
          type: number
        browserlang:
          type: integer
      example:
        id: ck9vik2sw0000cytlchrg5kik
        username: Fran.Dietrch27
        email: Cale30@hotail.cm
        password: lFgE9Cus7maKtpr
        longitude: 27.3772
        latitude: 81.1052
        browserlang: es
      xml:
        name: UserInput
    UserInfo:
      type: object
      description: flattened user object without id field
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        longitude:
          type: number
        latitude:
          type: number
        browserlang:
          type: integer
      example: 
        username: Fran.Dietrch27
        email: Cale30@hotail.cm
        password: lFgE9Cus7maKtpr
        longitude: 27.3772
        latitude: 81.1052
        browserlang: es
      xml:
        name: UserInfo
  parameters:
    userId:
      name: userId
      in: path
      description: uuid of user to operate on
      required: true
      schema:
        type: string
      example:
        ck9vik2sw0000cytlchrg5kik
